{"ast":null,"code":"import { GET_POSTS_REQUEST, GET_POSTS_SUCCESS, GET_POSTS_FAIL, GET_USERS_BY_ID_REQUEST, GET_USERS_BY_ID_SUCCESS, GET_USERS_BY_ID_FAIL } from \"./actionsTypes\";\nimport { getPosts, getUserById } from \"../apis/jsonPlaceholder\";\nexport const fetchPosts = () => async dispatch => {\n  let payload;\n  dispatch({\n    type: GET_POSTS_REQUEST,\n    payload: {\n      posts: [],\n      status: 0,\n      text: \"\",\n      error: false,\n      headerMessageText: \"\",\n      messageText: \"\",\n      showMessage: false,\n      categoryMessage: \"info\"\n    }\n  });\n\n  try {\n    let isError = true;\n    const response = await getPosts();\n\n    if (response.status === 200) {\n      isError = false;\n    }\n\n    payload = {\n      posts: response.data,\n      status: response.status,\n      text: response.statusText,\n      error: isError,\n      headerMessageText: \"\",\n      messageText: \"\",\n      showMessage: false,\n      categoryMessage: \"info\"\n    };\n    dispatch({\n      type: GET_POSTS_SUCCESS,\n      payload: payload\n    });\n  } catch (error) {\n    payload = {\n      posts: [],\n      status: 404,\n      text: error.toJSON().message,\n      error: true,\n      headerMessageText: \"We're sorry we can't show you posts!\",\n      messageText: \"An error occurred while loading data: \" + error.toJSON().message,\n      showMessage: true,\n      categoryMessage: \"negative\"\n    };\n    dispatch({\n      type: GET_POSTS_FAIL,\n      payload: payload\n    });\n  }\n};\nexport const fetchUserById = id => async dispatch => {\n  setTimeout(async function () {\n    let payload;\n    payload = {\n      user: {\n        id: id,\n        name: \"\",\n        username: \"\",\n        email: \"\",\n        address: {},\n        phone: \"\",\n        website: \"\",\n        company: {}\n      },\n      status: 0,\n      error: false\n    };\n    dispatch({\n      type: GET_USERS_BY_ID_REQUEST,\n      payload: payload\n    });\n\n    try {\n      let isError = true;\n      const response = await getUserById(id);\n\n      if (response.status === 200) {\n        isError = false;\n      }\n\n      console.log(\"fetchUserById, getUserById, id: \" + id);\n      payload = {\n        user: {\n          id: id,\n          name: response.data.name,\n          username: response.data.username,\n          email: response.data.email,\n          address: {},\n          phone: response.data.phone,\n          website: \"\",\n          company: response.data.website\n        },\n        status: response.status,\n        error: isError\n      };\n      dispatch({\n        type: GET_USERS_BY_ID_SUCCESS,\n        payload: payload\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_USERS_BY_ID_FAIL,\n        payload: payload\n      });\n    }\n  }, 10000);\n};","map":{"version":3,"sources":["/home/beatakula/workspace/react/my-blog-app/src/actions/index.tsx"],"names":["GET_POSTS_REQUEST","GET_POSTS_SUCCESS","GET_POSTS_FAIL","GET_USERS_BY_ID_REQUEST","GET_USERS_BY_ID_SUCCESS","GET_USERS_BY_ID_FAIL","getPosts","getUserById","fetchPosts","dispatch","payload","type","posts","status","text","error","headerMessageText","messageText","showMessage","categoryMessage","isError","response","data","statusText","toJSON","message","fetchUserById","id","setTimeout","user","name","username","email","address","phone","website","company","console","log"],"mappings":"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","sourcesContent":["import {\n    GET_POSTS_REQUEST,\n    GET_POSTS_SUCCESS,\n    GET_POSTS_FAIL,\n    GET_USERS_BY_ID_REQUEST,\n    GET_USERS_BY_ID_SUCCESS,\n    GET_USERS_BY_ID_FAIL,\n} from \"./actionsTypes\";\n\nimport { getPosts, getUserById } from \"../apis/jsonPlaceholder\";\nimport {\n    categoryType,\n    DispatchType,\n    DispatchUserType,\n    PostPayload,\n    UserPayload,\n} from \"../AppTypes\";\n\nexport const fetchPosts: any = () => async (dispatch: DispatchType) => {\n    let payload: PostPayload;\n\n    dispatch({\n        type: GET_POSTS_REQUEST,\n        payload: {\n            posts: [],\n            status: 0,\n            text: \"\",\n            error: false,\n            headerMessageText: \"\",\n            messageText: \"\",\n            showMessage: false,\n            categoryMessage: \"info\" as categoryType,\n        },\n    });\n\n    try {\n        let isError = true;\n        const response = await getPosts();\n\n        if (response.status === 200) {\n            isError = false;\n        }\n\n        payload = {\n            posts: response.data,\n            status: response.status,\n            text: response.statusText,\n            error: isError,\n            headerMessageText: \"\",\n            messageText: \"\",\n            showMessage: false,\n            categoryMessage: \"info\" as categoryType,\n        };\n\n        dispatch({ type: GET_POSTS_SUCCESS, payload: payload });\n    } catch (error: any) {\n        payload = {\n            posts: [],\n            status: 404,\n            text: error.toJSON().message,\n            error: true,\n            headerMessageText: \"We're sorry we can't show you posts!\",\n            messageText:\n                \"An error occurred while loading data: \" +\n                error.toJSON().message,\n            showMessage: true,\n            categoryMessage: \"negative\",\n        };\n\n        dispatch({ type: GET_POSTS_FAIL, payload: payload });\n    }\n};\n\nexport const fetchUserById: any =\n    (id: number) => async (dispatch: DispatchUserType) => {\n        setTimeout(async function () {\n            let payload: UserPayload;\n\n            payload = {\n                user: {\n                    id: id,\n                    name: \"\",\n                    username: \"\",\n                    email: \"\",\n                    address: {},\n                    phone: \"\",\n                    website: \"\",\n                    company: {},\n                },\n                status: 0,\n                error: false,\n            };\n\n            dispatch({\n                type: GET_USERS_BY_ID_REQUEST,\n                payload: payload,\n            });\n\n            try {\n                let isError = true;\n                const response = await getUserById(id);\n\n                if (response.status === 200) {\n                    isError = false;\n                }\n                console.log(\"fetchUserById, getUserById, id: \" + id);\n\n                payload = {\n                    user: {\n                        id: id,\n                        name: response.data.name,\n                        username: response.data.username,\n                        email: response.data.email,\n                        address: {},\n                        phone: response.data.phone,\n                        website: \"\",\n                        company: response.data.website,\n                    },\n                    status: response.status,\n                    error: isError,\n                };\n\n                dispatch({ type: GET_USERS_BY_ID_SUCCESS, payload: payload });\n            } catch (error: any) {\n                dispatch({ type: GET_USERS_BY_ID_FAIL, payload: payload });\n            }\n        }, 10000);\n    };\n"]},"metadata":{},"sourceType":"module"}