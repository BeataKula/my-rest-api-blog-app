{"ast":null,"code":"import { GET_POSTS_REQUEST, GET_POSTS_SUCCESS, GET_POSTS_FAIL } from \"./actionsTypes\";\nimport { getPosts, getUserById } from \"../apis/jsonPlaceholder\";\nexport const fetchPosts = () => async dispatch => {\n  setTimeout(async function () {\n    let payload;\n    dispatch({\n      type: GET_POSTS_REQUEST,\n      payload: {\n        posts: [],\n        status: 0,\n        text: \"\",\n        error: false,\n        headerMessageText: \"\",\n        messageText: \"\",\n        showMessage: false,\n        categoryMessage: \"info\"\n      }\n    });\n\n    try {\n      let isError = true;\n      const response = await getPosts();\n\n      if (response.status === 200) {\n        isError = false;\n      }\n\n      payload = {\n        posts: response.data,\n        status: response.status,\n        text: response.statusText,\n        error: isError,\n        headerMessageText: \"\",\n        messageText: \"\",\n        showMessage: false,\n        categoryMessage: \"info\"\n      };\n      dispatch({\n        type: GET_POSTS_SUCCESS,\n        payload: payload\n      });\n    } catch (error) {\n      payload = {\n        posts: [],\n        status: 404,\n        text: error.toJSON().message,\n        error: true,\n        headerMessageText: \"We're sorry we can't show you posts!\",\n        messageText: \"An error occurred while loading data: \" + error.toJSON().message,\n        showMessage: true,\n        categoryMessage: \"negative\"\n      };\n      dispatch({\n        type: GET_POSTS_FAIL,\n        payload: payload\n      });\n    }\n  }, 1000);\n};\nexport const fetchUser = id => async dispatch => {\n  const response = await getUserById(id);\n  dispatch({\n    type: \"FETCH_USER\",\n    payload: response.data\n  });\n};\nexport const fetchPostsAndUsers = () => async (dispatch, getState) => {\n  await dispatch(fetchPosts());\n\n  _.chain(getState().posts).map(\"userId\").uniq().forEach(id => dispatch(fetchUser(id))).value();\n};","map":{"version":3,"sources":["/home/beatakula/workspace/react/my-blog-app/src/actions/index.tsx"],"names":["GET_POSTS_REQUEST","GET_POSTS_SUCCESS","GET_POSTS_FAIL","getPosts","getUserById","fetchPosts","dispatch","setTimeout","payload","type","posts","status","text","error","headerMessageText","messageText","showMessage","categoryMessage","isError","response","data","statusText","toJSON","message","fetchUser","id","fetchPostsAndUsers","getState","_","chain","map","uniq","forEach","value"],"mappings":"AAAA,SACIA,iBADJ,EAEIC,iBAFJ,EAGIC,cAHJ,QAIO,gBAJP;AAMA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,yBAAtC;AAGA,OAAO,MAAMC,UAAe,GAAG,MAAM,MAAOC,QAAP,IAAkC;AACnEC,EAAAA,UAAU,CAAC,kBAAkB;AACzB,QAAIC,OAAJ;AAEAF,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAET,iBADD;AAELQ,MAAAA,OAAO,EAAE;AACLE,QAAAA,KAAK,EAAE,EADF;AAELC,QAAAA,MAAM,EAAE,CAFH;AAGLC,QAAAA,IAAI,EAAE,EAHD;AAILC,QAAAA,KAAK,EAAE,KAJF;AAKLC,QAAAA,iBAAiB,EAAE,EALd;AAMLC,QAAAA,WAAW,EAAE,EANR;AAOLC,QAAAA,WAAW,EAAE,KAPR;AAQLC,QAAAA,eAAe,EAAE;AARZ;AAFJ,KAAD,CAAR;;AAcA,QAAI;AACA,UAAIC,OAAO,GAAG,IAAd;AACA,YAAMC,QAAQ,GAAG,MAAMhB,QAAQ,EAA/B;;AAEA,UAAIgB,QAAQ,CAACR,MAAT,KAAoB,GAAxB,EAA6B;AACzBO,QAAAA,OAAO,GAAG,KAAV;AACH;;AAEDV,MAAAA,OAAO,GAAG;AACNE,QAAAA,KAAK,EAAES,QAAQ,CAACC,IADV;AAENT,QAAAA,MAAM,EAAEQ,QAAQ,CAACR,MAFX;AAGNC,QAAAA,IAAI,EAAEO,QAAQ,CAACE,UAHT;AAINR,QAAAA,KAAK,EAAEK,OAJD;AAKNJ,QAAAA,iBAAiB,EAAE,EALb;AAMNC,QAAAA,WAAW,EAAE,EANP;AAONC,QAAAA,WAAW,EAAE,KAPP;AAQNC,QAAAA,eAAe,EAAE;AARX,OAAV;AAWAX,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAER,iBAAR;AAA2BO,QAAAA,OAAO,EAAEA;AAApC,OAAD,CAAR;AACH,KApBD,CAoBE,OAAOK,KAAP,EAAmB;AACjBL,MAAAA,OAAO,GAAG;AACNE,QAAAA,KAAK,EAAE,EADD;AAENC,QAAAA,MAAM,EAAE,GAFF;AAGNC,QAAAA,IAAI,EAAEC,KAAK,CAACS,MAAN,GAAeC,OAHf;AAINV,QAAAA,KAAK,EAAE,IAJD;AAKNC,QAAAA,iBAAiB,EAAE,sCALb;AAMNC,QAAAA,WAAW,EACP,2CACAF,KAAK,CAACS,MAAN,GAAeC,OARb;AASNP,QAAAA,WAAW,EAAE,IATP;AAUNC,QAAAA,eAAe,EAAE;AAVX,OAAV;AAaAX,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAEP,cAAR;AAAwBM,QAAAA,OAAO,EAAEA;AAAjC,OAAD,CAAR;AACH;AACJ,GArDS,EAqDP,IArDO,CAAV;AAsDH,CAvDM;AAyDP,OAAO,MAAMgB,SAAS,GAAIC,EAAD,IAAgB,MAAOnB,QAAP,IAAyB;AAC9D,QAAMa,QAAQ,GAAG,MAAMf,WAAW,CAACqB,EAAD,CAAlC;AAEAnB,EAAAA,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAE,YAAR;AAAsBD,IAAAA,OAAO,EAAEW,QAAQ,CAACC;AAAxC,GAAD,CAAR;AACH,CAJM;AAMP,OAAO,MAAMM,kBAAkB,GAC3B,MACA,OACIpB,QADJ,EAEIqB,QAFJ,KAGK;AACD,QAAMrB,QAAQ,CAACD,UAAU,EAAX,CAAd;;AAEAuB,EAAAA,CAAC,CAACC,KAAF,CAAQF,QAAQ,GAAGjB,KAAnB,EACKoB,GADL,CACS,QADT,EAEKC,IAFL,GAGKC,OAHL,CAGcP,EAAD,IAAQnB,QAAQ,CAACkB,SAAS,CAACC,EAAD,CAAV,CAH7B,EAIKQ,KAJL;AAKH,CAbE","sourcesContent":["import {\n    GET_POSTS_REQUEST,\n    GET_POSTS_SUCCESS,\n    GET_POSTS_FAIL,\n} from \"./actionsTypes\";\n\nimport { getPosts, getUserById } from \"../apis/jsonPlaceholder\";\nimport { categoryType, DispatchType, PostPayload } from \"../AppTypes\";\n\nexport const fetchPosts: any = () => async (dispatch: DispatchType) => {\n    setTimeout(async function () {\n        let payload: PostPayload;\n\n        dispatch({\n            type: GET_POSTS_REQUEST,\n            payload: {\n                posts: [],\n                status: 0,\n                text: \"\",\n                error: false,\n                headerMessageText: \"\",\n                messageText: \"\",\n                showMessage: false,\n                categoryMessage: \"info\" as categoryType,\n            },\n        });\n\n        try {\n            let isError = true;\n            const response = await getPosts();\n\n            if (response.status === 200) {\n                isError = false;\n            }\n\n            payload = {\n                posts: response.data,\n                status: response.status,\n                text: response.statusText,\n                error: isError,\n                headerMessageText: \"\",\n                messageText: \"\",\n                showMessage: false,\n                categoryMessage: \"info\" as categoryType,\n            };\n\n            dispatch({ type: GET_POSTS_SUCCESS, payload: payload });\n        } catch (error: any) {\n            payload = {\n                posts: [],\n                status: 404,\n                text: error.toJSON().message,\n                error: true,\n                headerMessageText: \"We're sorry we can't show you posts!\",\n                messageText:\n                    \"An error occurred while loading data: \" +\n                    error.toJSON().message,\n                showMessage: true,\n                categoryMessage: \"negative\",\n            };\n\n            dispatch({ type: GET_POSTS_FAIL, payload: payload });\n        }\n    }, 1000);\n};\n\nexport const fetchUser = (id: number) => async (dispatch: any) => {\n    const response = await getUserById(id);\n\n    dispatch({ type: \"FETCH_USER\", payload: response.data });\n};\n\nexport const fetchPostsAndUsers =\n    () =>\n    async (\n        dispatch: any,\n        getState: () => { (): any; new (): any; posts: any }\n    ) => {\n        await dispatch(fetchPosts());\n\n        _.chain(getState().posts)\n            .map(\"userId\")\n            .uniq()\n            .forEach((id) => dispatch(fetchUser(id)))\n            .value();\n    };\n"]},"metadata":{},"sourceType":"module"}