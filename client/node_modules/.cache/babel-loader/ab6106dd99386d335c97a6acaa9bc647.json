{"ast":null,"code":"import { GET_POSTS_REQUEST, GET_POSTS_SUCCESS, GET_POSTS_FAIL } from \"./actionsTypes\";\nimport _ from \"lodash\";\nimport { getPosts, getUserById } from \"../apis/jsonPlaceholder\"; //TODO\n\nexport const fetchPostsAndUsers = () => async (dispatch, getState) => {\n  await dispatch(fetchPosts());\n\n  _.chain(getState().postsReducer.allList.data).map(\"userId\").uniq().forEach(id => dispatch(fetchUser(id))).value();\n};\nexport const fetchPosts = () => async dispatch => {\n  let payload;\n  dispatch({\n    type: GET_POSTS_REQUEST,\n    payload: {\n      posts: [],\n      status: 0,\n      text: \"\",\n      error: false,\n      headerMessageText: \"\",\n      messageText: \"\",\n      showMessage: false,\n      categoryMessage: \"info\"\n    }\n  });\n\n  try {\n    let isError = true;\n    const response = await getPosts();\n\n    if (response.status === 200) {\n      isError = false;\n    }\n\n    payload = {\n      posts: response.data,\n      status: response.status,\n      text: response.statusText,\n      error: isError,\n      headerMessageText: \"\",\n      messageText: \"\",\n      showMessage: false,\n      categoryMessage: \"info\"\n    };\n    dispatch({\n      type: GET_POSTS_SUCCESS,\n      payload: payload.posts\n    });\n  } catch (error) {\n    payload = {\n      posts: [],\n      status: 404,\n      text: error.toJSON().message,\n      error: true,\n      headerMessageText: \"We're sorry we can't show you posts!\",\n      messageText: \"An error occurred while loading data: \" + error.toJSON().message,\n      showMessage: true,\n      categoryMessage: \"negative\"\n    };\n    dispatch({\n      type: GET_POSTS_FAIL,\n      payload: payload\n    });\n  }\n};\nexport const fetchUser = id => async dispatch => {\n  const response = await getUserById(id);\n  dispatch({\n    type: \"GET_USERS_BY_ID_SUCCESS\",\n    payload: response.data\n  });\n};","map":{"version":3,"sources":["/home/beatakula/workspace/react/my-blog-app/src/actions/index.tsx"],"names":["GET_POSTS_REQUEST","GET_POSTS_SUCCESS","GET_POSTS_FAIL","_","getPosts","getUserById","fetchPostsAndUsers","dispatch","getState","fetchPosts","chain","postsReducer","allList","data","map","uniq","forEach","id","fetchUser","value","payload","type","posts","status","text","error","headerMessageText","messageText","showMessage","categoryMessage","isError","response","statusText","toJSON","message"],"mappings":"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","sourcesContent":["import {\n    GET_POSTS_REQUEST,\n    GET_POSTS_SUCCESS,\n    GET_POSTS_FAIL,\n} from \"./actionsTypes\";\n\nimport _ from \"lodash\";\nimport { getPosts, getUserById } from \"../apis/jsonPlaceholder\";\n//TODO\nimport { categoryType, DispatchType, PostPayload } from \"../AppTypes\";\n\nexport const fetchPostsAndUsers: any =\n    () => async (dispatch: any, getState: any) => {\n        await dispatch(fetchPosts());\n\n        _.chain(getState().postsReducer.allList.data)\n            .map(\"userId\")\n            .uniq()\n            .forEach((id) => dispatch(fetchUser(id)))\n            .value();\n    };\n\nexport const fetchPosts: any = () => async (dispatch: DispatchType) => {\n    let payload: PostPayload;\n\n    dispatch({\n        type: GET_POSTS_REQUEST,\n        payload: {\n            posts: [],\n            status: 0,\n            text: \"\",\n            error: false,\n            headerMessageText: \"\",\n            messageText: \"\",\n            showMessage: false,\n            categoryMessage: \"info\" as categoryType,\n        },\n    });\n\n    try {\n        let isError = true;\n        const response = await getPosts();\n\n        if (response.status === 200) {\n            isError = false;\n        }\n\n        payload = {\n            posts: response.data,\n            status: response.status,\n            text: response.statusText,\n            error: isError,\n            headerMessageText: \"\",\n            messageText: \"\",\n            showMessage: false,\n            categoryMessage: \"info\",\n        };\n\n        dispatch({ type: GET_POSTS_SUCCESS, payload: payload.posts });\n    } catch (error) {\n        payload = {\n            posts: [],\n            status: 404,\n            text: error.toJSON().message,\n            error: true,\n            headerMessageText: \"We're sorry we can't show you posts!\",\n            messageText:\n                \"An error occurred while loading data: \" +\n                error.toJSON().message,\n            showMessage: true,\n            categoryMessage: \"negative\",\n        };\n\n        dispatch({ type: GET_POSTS_FAIL, payload: payload });\n    }\n};\n\nexport const fetchUser = (id) => async (dispatch) => {\n    const response = await getUserById(id);\n\n    dispatch({ type: \"GET_USERS_BY_ID_SUCCESS\", payload: response.data });\n};\n"]},"metadata":{},"sourceType":"module"}