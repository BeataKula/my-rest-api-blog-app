{"ast":null,"code":"import { GET_POSTS_REQUEST, GET_POSTS_SUCCESS, GET_POSTS_FAIL, GET_USERS_BY_ID_REQUEST } from \"./actionsTypes\";\nimport { getPosts } from \"../apis/jsonPlaceholder\";\nexport const fetchPosts = () => async dispatch => {\n  setTimeout(async function () {\n    let payload;\n    dispatch({\n      type: GET_POSTS_REQUEST,\n      payload: {\n        posts: [],\n        status: 0,\n        text: \"\",\n        error: false,\n        headerMessageText: \"\",\n        messageText: \"\",\n        showMessage: false,\n        categoryMessage: \"info\"\n      }\n    });\n\n    try {\n      let isError = true;\n      const response = await getPosts();\n\n      if (response.status === 200) {\n        isError = false;\n      }\n\n      payload = {\n        posts: response.data,\n        status: response.status,\n        text: response.statusText,\n        error: isError,\n        headerMessageText: \"\",\n        messageText: \"\",\n        showMessage: false,\n        categoryMessage: \"info\"\n      };\n      dispatch({\n        type: GET_POSTS_SUCCESS,\n        payload: payload\n      });\n    } catch (error) {\n      payload = {\n        posts: [],\n        status: 404,\n        text: error.toJSON().message,\n        error: true,\n        headerMessageText: \"We're sorry we can't show you posts!\",\n        messageText: \"An error occurred while loading data: \" + error.toJSON().message,\n        showMessage: true,\n        categoryMessage: \"negative\"\n      };\n      dispatch({\n        type: GET_POSTS_FAIL,\n        payload: payload\n      });\n    }\n  }, 1000);\n};\nexport const getUserById = () => async dispatch => {\n  dispatch({\n    type: GET_USERS_BY_ID_REQUEST,\n    payload: {\n      user: {\n        id: 1,\n        name: \"\",\n        username: \"\",\n        email: \"\",\n        address: {\n          street: \"\",\n          suite: \"\",\n          city: \"\",\n          zipcode: \"\",\n          geo: {\n            lat: \"\",\n            lng: \"\"\n          }\n        },\n        phone: \"\",\n        website: \"\",\n        company: {\n          name: \"\",\n          catchPhrase: \"\",\n          bs: \"\"\n        }\n      },\n      status: 0\n    }\n  });\n};","map":{"version":3,"sources":["/home/beatakula/workspace/react/my-blog-app/src/actions/index.tsx"],"names":["GET_POSTS_REQUEST","GET_POSTS_SUCCESS","GET_POSTS_FAIL","GET_USERS_BY_ID_REQUEST","getPosts","fetchPosts","dispatch","setTimeout","payload","type","posts","status","text","error","headerMessageText","messageText","showMessage","categoryMessage","isError","response","data","statusText","toJSON","message","getUserById","user","id","name","username","email","address","street","suite","city","zipcode","geo","lat","lng","phone","website","company","catchPhrase","bs"],"mappings":"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","sourcesContent":["import {\n    GET_POSTS_REQUEST,\n    GET_POSTS_SUCCESS,\n    GET_POSTS_FAIL,\n    GET_USERS_BY_ID_REQUEST,\n    GET_USERS_BY_ID_SUCCESS,\n    GET_USERS_BY_ID_FAIL,\n} from \"./actionsTypes\";\n\nimport { getPosts } from \"../apis/jsonPlaceholder\";\nimport {\n    categoryType,\n    DispatchType,\n    DispatchUserType,\n    PostPayload,\n} from \"../AppTypes\";\n\nexport const fetchPosts: any = () => async (dispatch: DispatchType) => {\n    setTimeout(async function () {\n        let payload: PostPayload;\n\n        dispatch({\n            type: GET_POSTS_REQUEST,\n            payload: {\n                posts: [],\n                status: 0,\n                text: \"\",\n                error: false,\n                headerMessageText: \"\",\n                messageText: \"\",\n                showMessage: false,\n                categoryMessage: \"info\" as categoryType,\n            },\n        });\n\n        try {\n            let isError = true;\n            const response = await getPosts();\n\n            if (response.status === 200) {\n                isError = false;\n            }\n\n            payload = {\n                posts: response.data,\n                status: response.status,\n                text: response.statusText,\n                error: isError,\n                headerMessageText: \"\",\n                messageText: \"\",\n                showMessage: false,\n                categoryMessage: \"info\" as categoryType,\n            };\n\n            dispatch({ type: GET_POSTS_SUCCESS, payload: payload });\n        } catch (error: any) {\n            payload = {\n                posts: [],\n                status: 404,\n                text: error.toJSON().message,\n                error: true,\n                headerMessageText: \"We're sorry we can't show you posts!\",\n                messageText:\n                    \"An error occurred while loading data: \" +\n                    error.toJSON().message,\n                showMessage: true,\n                categoryMessage: \"negative\",\n            };\n\n            dispatch({ type: GET_POSTS_FAIL, payload: payload });\n        }\n    }, 1000);\n};\n\nexport const getUserById: any = () => async (dispatch: DispatchUserType) => {\n    dispatch({\n        type: GET_USERS_BY_ID_REQUEST,\n        payload: {\n            user: {\n                id: 1,\n                name: \"\",\n                username: \"\",\n                email: \"\",\n                address: {\n                    street: \"\",\n                    suite: \"\",\n                    city: \"\",\n                    zipcode: \"\",\n                    geo: {\n                        lat: \"\",\n                        lng: \"\",\n                    },\n                },\n                phone: \"\",\n                website: \"\",\n                company: {\n                    name: \"\",\n                    catchPhrase: \"\",\n                    bs: \"\",\n                },\n            },\n            status: 0,\n        },\n    });\n};\n"]},"metadata":{},"sourceType":"module"}