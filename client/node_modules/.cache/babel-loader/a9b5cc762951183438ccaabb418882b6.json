{"ast":null,"code":"import { GET_POSTS_REQUEST, GET_POSTS_SUCCESS, GET_POSTS_FAIL, GET_USERS_BY_ID_REQUEST, GET_USERS_BY_ID_SUCCESS, GET_USERS_BY_ID_FAIL } from \"./actionsTypes\";\nimport { getPosts, getUserById } from \"../apis/jsonPlaceholder\";\nexport const fetchPosts = () => async dispatch => {\n  setTimeout(async function () {\n    let payload;\n    dispatch({\n      type: GET_POSTS_REQUEST,\n      payload: {\n        posts: [],\n        status: 0,\n        text: \"\",\n        error: false,\n        headerMessageText: \"\",\n        messageText: \"\",\n        showMessage: false,\n        categoryMessage: \"info\"\n      }\n    });\n\n    try {\n      let isError = true;\n      const response = await getPosts();\n\n      if (response.status === 200) {\n        isError = false;\n      }\n\n      payload = {\n        posts: response.data,\n        status: response.status,\n        text: response.statusText,\n        error: isError,\n        headerMessageText: \"\",\n        messageText: \"\",\n        showMessage: false,\n        categoryMessage: \"info\"\n      };\n      dispatch({\n        type: GET_POSTS_SUCCESS,\n        payload: payload\n      });\n    } catch (error) {\n      payload = {\n        posts: [],\n        status: 404,\n        text: error.toJSON().message,\n        error: true,\n        headerMessageText: \"We're sorry we can't show you posts!\",\n        messageText: \"An error occurred while loading data: \" + error.toJSON().message,\n        showMessage: true,\n        categoryMessage: \"negative\"\n      };\n      dispatch({\n        type: GET_POSTS_FAIL,\n        payload: payload\n      });\n    }\n  }, 1000);\n};\nexport const fetchUserById = id => async dispatch => {\n  let payload;\n  payload = {\n    user: {\n      id: id,\n      name: \"\",\n      username: \"\",\n      email: \"\",\n      address: {},\n      phone: \"\",\n      website: \"\",\n      company: {}\n    },\n    status: 0,\n    error: false\n  };\n  dispatch({\n    type: GET_USERS_BY_ID_REQUEST,\n    payload: payload\n  });\n\n  try {\n    let isError = true;\n    const response = await getUserById(id);\n\n    if (response.status === 200) {\n      isError = false;\n    }\n\n    console.log(\"fetchUserById, getUserById, id: \" + id);\n    payload = {\n      user: {\n        id: id,\n        name: response.data.name,\n        username: response.data.username,\n        email: response.data.email,\n        address: {},\n        phone: response.data.phone,\n        website: \"\",\n        company: response.data.website\n      },\n      status: response.status,\n      error: isError\n    };\n    dispatch({\n      type: GET_USERS_BY_ID_SUCCESS,\n      payload: payload\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_USERS_BY_ID_FAIL,\n      payload: payload\n    });\n  }\n};","map":{"version":3,"sources":["/home/beatakula/workspace/react/my-blog-app/src/actions/index.tsx"],"names":["GET_POSTS_REQUEST","GET_POSTS_SUCCESS","GET_POSTS_FAIL","GET_USERS_BY_ID_REQUEST","GET_USERS_BY_ID_SUCCESS","GET_USERS_BY_ID_FAIL","getPosts","getUserById","fetchPosts","dispatch","setTimeout","payload","type","posts","status","text","error","headerMessageText","messageText","showMessage","categoryMessage","isError","response","data","statusText","toJSON","message","fetchUserById","id","user","name","username","email","address","phone","website","company","console","log"],"mappings":"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","sourcesContent":["import {\n    GET_POSTS_REQUEST,\n    GET_POSTS_SUCCESS,\n    GET_POSTS_FAIL,\n    GET_USERS_BY_ID_REQUEST,\n    GET_USERS_BY_ID_SUCCESS,\n    GET_USERS_BY_ID_FAIL,\n} from \"./actionsTypes\";\n\nimport { getPosts, getUserById } from \"../apis/jsonPlaceholder\";\nimport {\n    categoryType,\n    DispatchType,\n    DispatchUserType,\n    PostPayload,\n    UserPayload,\n} from \"../AppTypes\";\n\nexport const fetchPosts: any = () => async (dispatch: DispatchType) => {\n    setTimeout(async function () {\n        let payload: PostPayload;\n\n        dispatch({\n            type: GET_POSTS_REQUEST,\n            payload: {\n                posts: [],\n                status: 0,\n                text: \"\",\n                error: false,\n                headerMessageText: \"\",\n                messageText: \"\",\n                showMessage: false,\n                categoryMessage: \"info\" as categoryType,\n            },\n        });\n\n        try {\n            let isError = true;\n            const response = await getPosts();\n\n            if (response.status === 200) {\n                isError = false;\n            }\n\n            payload = {\n                posts: response.data,\n                status: response.status,\n                text: response.statusText,\n                error: isError,\n                headerMessageText: \"\",\n                messageText: \"\",\n                showMessage: false,\n                categoryMessage: \"info\" as categoryType,\n            };\n\n            dispatch({ type: GET_POSTS_SUCCESS, payload: payload });\n        } catch (error: any) {\n            payload = {\n                posts: [],\n                status: 404,\n                text: error.toJSON().message,\n                error: true,\n                headerMessageText: \"We're sorry we can't show you posts!\",\n                messageText:\n                    \"An error occurred while loading data: \" +\n                    error.toJSON().message,\n                showMessage: true,\n                categoryMessage: \"negative\",\n            };\n\n            dispatch({ type: GET_POSTS_FAIL, payload: payload });\n        }\n    }, 1000);\n};\n\nexport const fetchUserById: any =\n    (id: number) => async (dispatch: DispatchUserType) => {\n        let payload: UserPayload;\n\n        payload = {\n            user: {\n                id: id,\n                name: \"\",\n                username: \"\",\n                email: \"\",\n                address: {},\n                phone: \"\",\n                website: \"\",\n                company: {},\n            },\n            status: 0,\n            error: false,\n        };\n\n        dispatch({\n            type: GET_USERS_BY_ID_REQUEST,\n            payload: payload,\n        });\n\n        try {\n            let isError = true;\n            const response = await getUserById(id);\n\n            if (response.status === 200) {\n                isError = false;\n            }\n            console.log(\"fetchUserById, getUserById, id: \" + id);\n\n            payload = {\n                user: {\n                    id: id,\n                    name: response.data.name,\n                    username: response.data.username,\n                    email: response.data.email,\n                    address: {},\n                    phone: response.data.phone,\n                    website: \"\",\n                    company: response.data.website,\n                },\n                status: response.status,\n                error: isError,\n            };\n\n            dispatch({ type: GET_USERS_BY_ID_SUCCESS, payload: payload });\n        } catch (error: any) {\n            dispatch({ type: GET_USERS_BY_ID_FAIL, payload: payload });\n        }\n    };\n"]},"metadata":{},"sourceType":"module"}