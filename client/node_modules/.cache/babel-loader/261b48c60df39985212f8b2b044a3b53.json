{"ast":null,"code":"import { GET_POSTS_REQUEST, GET_POSTS_SUCCESS, GET_POSTS_FAIL, GET_USERS_BY_ID_REQUEST, GET_USERS_BY_ID_SUCCESS, GET_USERS_BY_ID_FAIL } from \"./actionsTypes\";\nimport _ from \"lodash\";\nimport { getPosts, getUserById } from \"../apis/jsonPlaceholder\"; //TODO\n\nimport { categoryType, DispatchType, PostPayload } from \"../AppTypes\";\nexport const fetchPostsAndUsers = () => async (dispatch, getState) => {\n  await dispatch(fetchPosts());\n\n  _.chain(getState().postsReducer.allList.data).map(\"userId\").uniq().forEach(id => dispatch(fetchUser(id))).value();\n};\nexport const fetchPosts = () => async dispatch => {\n  dispatch({\n    type: GET_POSTS_REQUEST,\n    payload: {\n      posts: [],\n      status: 0,\n      text: \"\",\n      error: false,\n      headerMessageText: \"\",\n      messageText: \"\",\n      showMessage: false,\n      categoryMessage: \"info\"\n    }\n  });\n\n  try {\n    let isError = true;\n    const response = await getPosts();\n\n    if (response.status === 200) {\n      isError = false;\n    }\n\n    let payload = {\n      posts: response.data,\n      status: response.status,\n      text: response.statusText,\n      error: isError,\n      headerMessageText: \"\",\n      messageText: \"\",\n      showMessage: false,\n      categoryMessage: \"info\"\n    };\n    dispatch({\n      type: GET_POSTS_SUCCESS,\n      payload: payload.posts\n    });\n  } catch (error) {\n    let payload = {\n      posts: [],\n      status: 404,\n      text: error.toJSON().message,\n      error: true,\n      headerMessageText: \"We're sorry we can't show you posts!\",\n      messageText: \"An error occurred while loading data: \" + error.toJSON().message,\n      showMessage: true,\n      categoryMessage: \"negative\"\n    };\n    dispatch({\n      type: GET_POSTS_FAIL,\n      payload: payload\n    });\n  }\n};\nexport const fetchUser = id => async dispatch => {\n  let payload = {\n    userById: {\n      isLoading: true,\n      error: true,\n      data: {}\n    }\n  };\n  dispatch({\n    type: GET_USERS_BY_ID_REQUEST,\n    payload: {}\n  });\n\n  try {\n    let isError = true;\n    const response = await getUserById(id);\n\n    if (response.status === 200) {\n      isError = false;\n    }\n\n    payload = {\n      userById: {\n        isLoading: false,\n        error: isError,\n        data: response.data\n      }\n    };\n    dispatch({\n      type: GET_USERS_BY_ID_SUCCESS,\n      payload: response.data\n    });\n  } catch (error) {\n    payload = {\n      userById: {\n        isLoading: false,\n        error: true,\n        data: error.toJSON().message\n      }\n    };\n    dispatch({\n      type: GET_POSTS_FAIL,\n      payload: payload\n    });\n  }\n};","map":{"version":3,"sources":["/home/beatakula/workspace/react/my-blog-app/src/actions/index.js"],"names":["GET_POSTS_REQUEST","GET_POSTS_SUCCESS","GET_POSTS_FAIL","GET_USERS_BY_ID_REQUEST","GET_USERS_BY_ID_SUCCESS","GET_USERS_BY_ID_FAIL","_","getPosts","getUserById","categoryType","DispatchType","PostPayload","fetchPostsAndUsers","dispatch","getState","fetchPosts","chain","postsReducer","allList","data","map","uniq","forEach","id","fetchUser","value","type","payload","posts","status","text","error","headerMessageText","messageText","showMessage","categoryMessage","isError","response","statusText","toJSON","message","userById","isLoading"],"mappings":"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","sourcesContent":["import {\n    GET_POSTS_REQUEST,\n    GET_POSTS_SUCCESS,\n    GET_POSTS_FAIL,\n    GET_USERS_BY_ID_REQUEST,\n    GET_USERS_BY_ID_SUCCESS,\n    GET_USERS_BY_ID_FAIL,\n} from \"./actionsTypes\";\n\nimport _ from \"lodash\";\nimport { getPosts, getUserById } from \"../apis/jsonPlaceholder\";\n//TODO\nimport { categoryType, DispatchType, PostPayload } from \"../AppTypes\";\n\nexport const fetchPostsAndUsers = () => async (dispatch, getState) => {\n    await dispatch(fetchPosts());\n\n    _.chain(getState().postsReducer.allList.data)\n        .map(\"userId\")\n        .uniq()\n        .forEach((id) => dispatch(fetchUser(id)))\n        .value();\n};\n\nexport const fetchPosts = () => async (dispatch) => {\n    dispatch({\n        type: GET_POSTS_REQUEST,\n        payload: {\n            posts: [],\n            status: 0,\n            text: \"\",\n            error: false,\n            headerMessageText: \"\",\n            messageText: \"\",\n            showMessage: false,\n            categoryMessage: \"info\",\n        },\n    });\n\n    try {\n        let isError = true;\n        const response = await getPosts();\n\n        if (response.status === 200) {\n            isError = false;\n        }\n\n        let payload = {\n            posts: response.data,\n            status: response.status,\n            text: response.statusText,\n            error: isError,\n            headerMessageText: \"\",\n            messageText: \"\",\n            showMessage: false,\n            categoryMessage: \"info\",\n        };\n\n        dispatch({ type: GET_POSTS_SUCCESS, payload: payload.posts });\n    } catch (error) {\n        let payload = {\n            posts: [],\n            status: 404,\n            text: error.toJSON().message,\n            error: true,\n            headerMessageText: \"We're sorry we can't show you posts!\",\n            messageText:\n                \"An error occurred while loading data: \" +\n                error.toJSON().message,\n            showMessage: true,\n            categoryMessage: \"negative\",\n        };\n\n        dispatch({ type: GET_POSTS_FAIL, payload: payload });\n    }\n};\n\nexport const fetchUser = (id) => async (dispatch) => {\n    let payload = {\n        userById: {\n            isLoading: true,\n            error: true,\n            data: {},\n        },\n    };\n\n    dispatch({ type: GET_USERS_BY_ID_REQUEST, payload: {} });\n\n    try {\n        let isError = true;\n        const response = await getUserById(id);\n\n        if (response.status === 200) {\n            isError = false;\n        }\n\n        payload = {\n            userById: {\n                isLoading: false,\n                error: isError,\n                data: response.data,\n            },\n        };\n\n        dispatch({ type: GET_USERS_BY_ID_SUCCESS, payload: response.data });\n    } catch (error) {\n        payload = {\n            userById: {\n                isLoading: false,\n                error: true,\n                data: error.toJSON().message,\n            },\n        };\n        dispatch({ type: GET_POSTS_FAIL, payload: payload });\n    }\n};\n"]},"metadata":{},"sourceType":"module"}